# 🎓 Google Colab シンプル版 - 小学生プログラミングスクールAI
# UI問題を解決した確実動作版

print("🚀 小学生向けプログラミングスクールAI（シンプル版）")
print("=" * 50)

# ===== 1. 自動インストール =====
import subprocess
import sys

def install_packages():
    """必要パッケージの自動インストール"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "openai", "-q"])
        print("✅ OpenAIライブラリ インストール完了")
    except:
        print("⚠️ インストールをスキップ")

install_packages()

# ===== 2. ライブラリインポート =====
try:
    from openai import OpenAI
    from google.colab import userdata
    print("✅ ライブラリ読み込み完了")
except ImportError as e:
    print(f"❌ インポートエラー: {e}")

# ===== 3. シンプルAIクラス =====
class SimpleProgrammingAI:
    """シンプル版プログラミングスクールAI"""
    
    def __init__(self):
        self.client = None
        
        # 選択肢の定義
        self.grades = {
            "1": "小学校低学年（6-8歳）",
            "2": "小学校中学年（9-10歳）", 
            "3": "小学校高学年（11-12歳）"
        }
        
        self.themes = {
            "1": "Scratch基礎",
            "2": "ゲーム作り",
            "3": "ロボット制御",
            "4": "Webサイト作成",
            "5": "アニメーション",
            "6": "音楽プログラミング"
        }
        
        self.functions = {
            "1": "📚 カリキュラム作成",
            "2": "💡 授業アイディア（5個）",
            "3": "🚀 プロジェクト提案（3個）"
        }

    def setup_api(self):
        """API設定"""
        try:
            api_key = userdata.get('OPENAI_API_KEY')
            self.client = OpenAI(api_key=api_key)
            
            # 接続テスト
            self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=1
            )
            print("✅ OpenAI API接続完了")
            return True
        except Exception as e:
            print(f"❌ API設定エラー: {e}")
            return False

    def show_menu(self, title, options):
        """メニュー表示"""
        print(f"\n📋 {title}")
        print("-" * 30)
        for key, value in options.items():
            print(f"{key}. {value}")
        print("-" * 30)

    def get_choice(self, options, message="選択してください"):
        """選択入力"""
        while True:
            choice = input(f"{message} (番号入力): ").strip()
            if choice in options:
                return choice
            print("❌ 無効な選択です。もう一度入力してください。")

    def generate_content(self, prompt):
        """AI生成"""
        try:
            print("🤖 AI生成中... 少々お待ちください")
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=1500
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"❌ エラー: {str(e)}"

    def create_curriculum(self, grade, theme):
        """カリキュラム作成"""
        prompt = f"""
{grade}向けの{theme}の4週間カリキュラムを作成してください。

以下の構成で作成：
1. カリキュラム概要
2. 学習目標（3つ）
3. 週別学習内容
   - 第1週：基礎学習
   - 第2週：応用学習  
   - 第3週：実践学習
   - 第4週：発表・まとめ
4. 各週の詳細な活動内容
5. 評価方法

小学生が楽しく学べる内容で、実際に授業で使える形式で作成してください。
        """
        return self.generate_content(prompt)

    def create_ideas(self, grade, theme):
        """授業アイディア作成"""
        prompt = f"""
{grade}向けの{theme}の授業アイディアを5つ提案してください。

各アイディアについて以下を含める：
1. アイディア名
2. 授業時間（45分想定）
3. 学習目標
4. 必要な準備
5. 授業の流れ（導入・展開・まとめ）
6. 子どもたちが楽しめるポイント

創造的で実践的な授業アイディアを提案してください。
        """
        return self.generate_content(prompt)

    def create_projects(self, grade, theme):
        """プロジェクト提案作成"""
        prompt = f"""
{grade}向けの{theme}を使った実践プロジェクトを3つ提案してください。

各プロジェクトについて以下を含める：
1. プロジェクト名
2. 完成までの時間
3. 学習効果
4. 必要なツール・材料
5. 制作手順（ステップ別）
6. 発表・共有方法
7. 難易度レベル

子どもたちが達成感を得られる魅力的なプロジェクトを提案してください。
        """
        return self.generate_content(prompt)

    def show_result(self, title, content):
        """結果表示"""
        print(f"\n🎉 {title} 作成完了！")
        print("=" * 60)
        print(content)
        print("=" * 60)
        print("✅ 上記の内容をコピーしてご利用ください")

    def start(self):
        """メインループ"""
        print("\n🎓 小学生向けプログラミングスクールAI")
        print("=" * 40)
        
        if not self.setup_api():
            print("\n🔑 APIキー設定方法:")
            print("1. 左サイドバーの🔑（Secrets）をクリック")
            print("2. 'New secret'をクリック")
            print("3. Name: OPENAI_API_KEY")
            print("4. Value: あなたのOpenAI APIキー")
            print("5. 'Notebook access'をONにする")
            print("6. このセルを再実行")
            return

        while True:
            # 学年選択
            self.show_menu("対象学年を選択", self.grades)
            grade_choice = self.get_choice(self.grades, "学年を選択")
            selected_grade = self.grades[grade_choice]
            
            # テーマ選択
            self.show_menu("学習テーマを選択", self.themes)
            theme_choice = self.get_choice(self.themes, "テーマを選択")
            selected_theme = self.themes[theme_choice]
            
            # 機能選択
            self.show_menu("作成する教材を選択", self.functions)
            func_choice = self.get_choice(self.functions, "機能を選択")
            
            print(f"\n📝 設定確認:")
            print(f"学年: {selected_grade}")
            print(f"テーマ: {selected_theme}")
            print(f"機能: {self.functions[func_choice]}")
            
            # AI生成実行
            if func_choice == "1":
                result = self.create_curriculum(selected_grade, selected_theme)
                self.show_result("📚 カリキュラム", result)
            elif func_choice == "2":
                result = self.create_ideas(selected_grade, selected_theme)
                self.show_result("💡 授業アイディア", result)
            elif func_choice == "3":
                result = self.create_projects(selected_grade, selected_theme)
                self.show_result("🚀 プロジェクト提案", result)
            
            # 継続確認
            print("\n" + "="*40)
            continue_choice = input("別の教材を作成しますか？ (y/n): ").strip().lower()
            if continue_choice != 'y':
                print("👋 ご利用ありがとうございました！")
                break

# ===== 4. 簡単起動関数 =====
def start_ai():
    """AI起動（シンプル版）"""
    app = SimpleProgrammingAI()
    app.start()

def quick_demo():
    """クイックデモ"""
    print("🎯 クイックデモ")
    print("=" * 30)
    print("このツールでできること:")
    print("📚 4週間カリキュラム自動生成")
    print("💡 5つの授業アイディア提案") 
    print("🚀 3つのプロジェクト提案")
    print()
    print("対応学年: 低学年〜高学年")
    print("テーマ: Scratch、ゲーム、ロボット等6種類")
    print()
    print("🚀 start_ai() で開始！")

def help_setup():
    """セットアップヘルプ"""
    print("🔧 セットアップ方法")
    print("=" * 30)
    print("1. OpenAI APIキーを取得")
    print("   - https://platform.openai.com/")
    print("   - アカウント登録・ログイン")
    print("   - API Keys セクションでキー生成")
    print()
    print("2. Google Colab Secretsに設定")
    print("   - 左サイドバー🔑クリック")
    print("   - 'New secret'クリック")
    print("   - Name: OPENAI_API_KEY")  
    print("   - Value: あなたのAPIキー")
    print("   - 'Notebook access' ON")
    print()
    print("3. start_ai() で開始")

# ===== 5. 使用方法案内 =====
print("\n🎯 使用方法（シンプル版）")
print("=" * 25)
print("quick_demo()   # デモ・機能紹介")
print("help_setup()   # セットアップ方法")
print("start_ai()     # AI起動")
print("=" * 25)
print("\n💡 改善点:")
print("✅ UIボタン → シンプルな数字入力")
print("✅ 複雑な表示 → 基本的なprint出力")
print("✅ ipywidgets不要 → 標準ライブラリのみ")
print("✅ 確実動作 → エラー対策強化")
print("\n🚀 今すぐ start_ai() で開始しましょう！")
